;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : ATM System
;Version : 1.5
;Date    : 5/24/2025
;Author  : Grok 3
;Company : xAI
;Comments: ATM system with 10 users, transfer, and transaction history
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdio.h>
;
;// LCD definitions
;#define LCD_RS PORTA.0
;#define LCD_RW PORTA.1
;#define LCD_EN PORTA.2
;#define LCD_D7 PORTA.4
;#define LCD_D6 PORTA.5
;#define LCD_D5 PORTA.6
;#define LCD_D4 PORTA.7
;
;// LED definitions
;#define LED_OK PORTC.0
;#define LED_ERROR PORTC.1
;
;// Keypad definitions
;#define ROWS 4
;#define COLS 4
;
;// User structure
;typedef struct {
;    char username[6]; // 5 chars + null terminator
;    char password[6]; // 5 chars + null terminator
;    unsigned int balance;
;} User;
;
;// Transaction structure
;typedef struct {
;    int sender_index;
;    int recipient_index;
;    unsigned int amount;
;} Transaction;
;
;// Global variables
;char keypad[ROWS][COLS] = {
;    {'1', '4', '7', '*'}, // Row 0 (PD0)
;    {'2', '5', '8', '0'}, // Row 1 (PD1)
;    {'3', '6', '9', '#'}, // Row 2 (PD2)
;    {'*', '0', '#', 'D'}  // Row 3 (not used, PD3 not connected)
;};

	.DSEG
;
;// Array of 10 users
;User users[10] = {
;    {"12345", "67890", 1000},
;    {"23456", "78901", 1500},
;    {"34567", "89012", 2000},
;    {"45678", "90123", 1200},
;    {"56789", "01234", 1800},
;    {"67890", "12345", 900},
;    {"78901", "23456", 2200},
;    {"89012", "34567", 1300},
;    {"90123", "45678", 1700},
;    {"01234", "56789", 1100}
;};
;
;// Transaction history (stores last 2 transactions)
;Transaction transactions[2];
;unsigned char transaction_count = 0;
;unsigned char transaction_index = 0;
;
;char input_username[6] = "";
;char input_password[6] = "";
;char recipient_username[6] = "";
;char input_amount[5] = "";
;int current_user_index = -1;
;
;// Function prototypes
;void lcd_init(void);
;void lcd_cmd(unsigned char);
;void lcd_data(unsigned char);
;void lcd_string(char*);
;char keypad_scan(void);
;void clear_input(char*, unsigned char);
;int find_user(char*);
;int find_recipient(char*);
;void wait_for_hash(void);
;void add_transaction(int sender_index, int recipient_index, unsigned int amount);
;
;// LCD initialization
;void lcd_init(void) {
; 0000 0069 void lcd_init(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 006A     LCD_RW = 0; // Ensure RW is always low (write mode)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 006B     lcd_cmd(0x02); // Initialize LCD in 4-bit mode
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 006C     lcd_cmd(0x28); // 2 lines, 5x7 matrix
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 006D     lcd_cmd(0x0C); // Display on, cursor off
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 006E     lcd_cmd(0x06); // Increment cursor
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 006F     lcd_cmd(0x01); // Clear display
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0070     delay_ms(2);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0071 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;// Send command to LCD
;void lcd_cmd(unsigned char cmd) {
; 0000 0074 void lcd_cmd(unsigned char cmd) {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0075     LCD_D4 = (cmd >> 4) & 0x01;
;PCODE: $00000022 VOL: 0
;	cmd -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0076     LCD_D5 = (cmd >> 5) & 0x01;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0077     LCD_D6 = (cmd >> 6) & 0x01;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0078     LCD_D7 = (cmd >> 7) & 0x01;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0079     LCD_RS = 0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007A     LCD_EN = 1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 007B     delay_ms(1);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007C     LCD_EN = 0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007D 
; 0000 007E     LCD_D4 = cmd & 0x01;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 007F     LCD_D5 = (cmd >> 1) & 0x01;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0080     LCD_D6 = (cmd >> 2) & 0x01;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0081     LCD_D7 = (cmd >> 3) & 0x01;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0082     LCD_RS = 0;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0083     LCD_EN = 1;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0084     delay_ms(1);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0085     LCD_EN = 0;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0086     delay_ms(2);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0087 }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;
;// Send data to LCD
;void lcd_data(unsigned char data) {
; 0000 008A void lcd_data(unsigned char data) {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008B     LCD_D4 = (data >> 4) & 0x01;
;PCODE: $00000094 VOL: 0
;	data -> Y+0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 008C     LCD_D5 = (data >> 5) & 0x01;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 008D     LCD_D6 = (data >> 6) & 0x01;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 008E     LCD_D7 = (data >> 7) & 0x01;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 008F     LCD_RS = 1;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0090     LCD_EN = 1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0091     delay_ms(1);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0092     LCD_EN = 0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0093 
; 0000 0094     LCD_D4 = data & 0x01;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0095     LCD_D5 = (data >> 1) & 0x01;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0096     LCD_D6 = (data >> 2) & 0x01;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0097     LCD_D7 = (data >> 3) & 0x01;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0098     LCD_RS = 1;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0099     LCD_EN = 1;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 009A     delay_ms(1);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 009B     LCD_EN = 0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 009C     delay_ms(2);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 009D }
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;
;// Display string on LCD
;void lcd_string(char *str) {
; 0000 00A0 void lcd_string(char *str) {
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00A1     char *ptr = str;
; 0000 00A2     while (*ptr) {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;	*str -> Y+2
;	*ptr -> R16,R17
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00A3         lcd_data(*ptr++);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00A4     }
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00A5 }
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;
;// Scan keypad for key press
;char keypad_scan(void) {
; 0000 00A8 char keypad_scan(void) {
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00A9     unsigned char row;
; 0000 00AA     unsigned char col;
; 0000 00AB     PORTD = 0xF0; // Set rows high, columns as inputs with pull-ups
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;	row -> R17
;	col -> R16
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00AC 
; 0000 00AD     for (row = 0; row < ROWS; row++) {
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00AE         if (row == 3) continue; // Skip unused row (PD3 not connected)
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00AF         PORTD = ~(1 << row); // Set one row low at a time (PD0-PD2)
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00B0         delay_ms(10);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00B1         for (col = 0; col < COLS; col++) {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00B2             if (!(PIND & (1 << (col + 4)))) { // Check columns PD4-PD7
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00B3                 while (!(PIND & (1 << (col + 4)))); // Wait for key release
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00B4                 return keypad[row][col];
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00B5             }
; 0000 00B6         }
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00B7     }
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00B8     return 0; // No key pressed
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00B9 }
;PCODE: $00000175 VOL: 0
;
;// Clear input buffer
;void clear_input(char *buffer, unsigned char size) {
; 0000 00BC void clear_input(char *buffer, unsigned char size) {
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00BD     unsigned char i = 0;
; 0000 00BE     for (; i < size; i++) {
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;	*buffer -> Y+2
;	size -> Y+1
;	i -> R17
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00BF         buffer[i] = '\0';
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00C0     }
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00C1 }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;
;// Find user by username
;int find_user(char *username) {
; 0000 00C4 int find_user(char *username) {
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00C5     int i = 0;
; 0000 00C6     for (; i < 10; i++) {
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;	*username -> Y+2
;	i -> R16,R17
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00C7         if (strcmp(users[i].username, username) == 0) {
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00C8             return i;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00C9         }
; 0000 00CA     }
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00CB     return -1; // User not found
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00CC }
;PCODE: $000001BA VOL: 0
;
;// Find recipient by username
;int find_recipient(char *username) {
; 0000 00CF int find_recipient(char *username) {
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00D0     int i = 0;
; 0000 00D1     for (; i < 10; i++) {
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;	*username -> Y+2
;	i -> R16,R17
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00D2         if (strcmp(users[i].username, username) == 0 && i != current_user_index) {
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00D3             return i;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00D4         }
; 0000 00D5     }
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00D6     return -1; // Recipient not found or same as current user
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00D7 }
;PCODE: $000001EC VOL: 0
;
;// Wait for '#' key to return to menu
;void wait_for_hash(void) {
; 0000 00DA void wait_for_hash(void) {
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00DB     char key;
; 0000 00DC     while (1) {
;PCODE: $000001EF VOL: 0
;	key -> R17
;PCODE: $000001F0 VOL: 0
; 0000 00DD         key = keypad_scan();
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00DE         if (key == '#') break;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00DF     }
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 00E0 }
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;
;// Add a transaction to the history
;void add_transaction(int sender_index, int recipient_index, unsigned int amount) {
; 0000 00E3 void add_transaction(int sender_index, int recipient_index, unsigned int amount) {
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00E4     transactions[transaction_index].sender_index = sender_index;
;PCODE: $000001FF VOL: 0
;	sender_index -> Y+4
;	recipient_index -> Y+2
;	amount -> Y+0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00E5     transactions[transaction_index].recipient_index = recipient_index;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00E6     transactions[transaction_index].amount = amount;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 00E7     transaction_index = (transaction_index + 1) % 2; // Circular buffer for 2 transactions
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 00E8     if (transaction_count < 2) transaction_count++;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 00E9 }
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;
;void main(void) {
; 0000 00EB void main(void) {
;PCODE: $00000222 VOL: 0
; 0000 00EC     unsigned char i;
; 0000 00ED     char key;
; 0000 00EE     char buffer[16];
; 0000 00EF     unsigned char authenticated = 0;
; 0000 00F0     int recipient_index;
; 0000 00F1     unsigned int amount;
; 0000 00F2     int j;
; 0000 00F3 
; 0000 00F4     // Port A initialization (LCD)
; 0000 00F5     DDRA = (1<<DDA0) | (1<<DDA1) | (1<<DDA2) | (1<<DDA4) | (1<<DDA5) | (1<<DDA6) | (1<<DDA7); // PA0, PA1, PA2, PA4-PA7  ...
;PCODE: $00000223 VOL: 0
;	i -> R17
;	key -> R16
;	buffer -> Y+4
;	authenticated -> R19
;	recipient_index -> R20,R21
;	amount -> Y+2
;	j -> Y+0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 00F6     PORTA = 0x00; // Initial state
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 00F7 
; 0000 00F8     // Port C initialization (LEDs)
; 0000 00F9     DDRC = (1<<DDC0) | (1<<DDC1); // PC0, PC1 as outputs for LEDs
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 00FA     PORTC = 0x00; // LEDs off initially
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 00FB 
; 0000 00FC     // Port D initialization (Keypad)
; 0000 00FD     DDRD = 0x0F;  // Rows (PD0-PD3) as outputs, Columns (PD4-PD7) as inputs
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 00FE     PORTD = 0xF0; // Enable pull-ups on columns
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 00FF 
; 0000 0100     // Timer/Counter 0 initialization
; 0000 0101     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0102     TCNT0=0x00;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0103     OCR0=0x00;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0104 
; 0000 0105     // Timer/Counter 1 initialization
; 0000 0106     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0107     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0108     TCNT1H=0x00;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0109     TCNT1L=0x00;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 010A     ICR1H=0x00;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 010B     ICR1L=0x00;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 010C     OCR1AH=0x00;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 010D     OCR1AL=0x00;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 010E     OCR1BH=0x00;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 010F     OCR1BL=0x00;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0110 
; 0000 0111     // Timer/Counter 2 initialization
; 0000 0112     ASSR=0<<AS2;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0113     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0114     TCNT2=0x00;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0115     OCR2=0x00;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0116 
; 0000 0117     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0118     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0119 
; 0000 011A     // External Interrupt(s) initialization
; 0000 011B     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 011C     MCUCSR=(0<<ISC2);
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 011D 
; 0000 011E     // USART initialization
; 0000 011F     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0120 
; 0000 0121     // Analog Comparator initialization
; 0000 0122     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0123     SFIOR=(0<<ACME);
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0124 
; 0000 0125     // ADC initialization
; 0000 0126     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0127 
; 0000 0128     // SPI initialization
; 0000 0129     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 012A 
; 0000 012B     // TWI initialization
; 0000 012C     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 012D 
; 0000 012E     // Initialize LCD
; 0000 012F     lcd_init();
;PCODE: $00000266 VOL: 0
; 0000 0130 
; 0000 0131     while (1) {
;PCODE: $00000267 VOL: 0
; 0000 0132         // Prompt for username
; 0000 0133         lcd_cmd(0x01); // Clear display
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0134         lcd_string("Enter UName:");
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0135         lcd_cmd(0xC0); // Move to second line
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0136         i = 0;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0137         clear_input(input_username, 6);
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0138         while (i < 5) {
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0139             key = keypad_scan();
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 013A             if (key && key != '#' && key != '*') {
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 013B                 input_username[i] = key;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 013C                 lcd_data(key);
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 013D                 i++;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 013E             }
; 0000 013F             if (key == '#') break; // Enter key
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0140         }
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0141         input_username[i] = '\0';
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0142 
; 0000 0143         // Prompt for password
; 0000 0144         lcd_cmd(0x01); // Clear display
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0145         lcd_string("Enter Pass:");
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 0146         lcd_cmd(0xC0); // Move to second line
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 0147         i = 0;
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0148         clear_input(input_password, 6);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0149         while (i < 5) {
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 014A             key = keypad_scan();
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 014B             if (key && key != '#' && key != '*') {
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 014C                 input_password[i] = key;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 014D                 lcd_data('*'); // Mask password
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 014E                 i++;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 014F             }
; 0000 0150             if (key == '#') break; // Enter key
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0151         }
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0152         input_password[i] = '\0';
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0153 
; 0000 0154         // Validate credentials
; 0000 0155         current_user_index = find_user(input_username);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0156         if (current_user_index != -1 && strcmp(users[current_user_index].password, input_password) == 0) {
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 0157             LED_OK = 1;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0158             LED_ERROR = 0;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 0159             authenticated = 1;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 015A         } else {
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 015B             LED_OK = 0;
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 015C             LED_ERROR = 1;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 015D             lcd_cmd(0x01);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 015E             lcd_string("Wrong Credentials");
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 015F             delay_ms(2000);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0160             continue;
;PCODE: $000002F7 VOL: 0
; 0000 0161         }
;PCODE: $000002F8 VOL: 0
; 0000 0162 
; 0000 0163         // Show menu if authenticated
; 0000 0164         while (authenticated) {
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 0165             lcd_cmd(0x01);
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 0166             lcd_string("1.Bal 2.Transf");
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 0167             lcd_cmd(0xC0);
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0168             lcd_string("3.Trsc 4.Oth?");
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 0169 
; 0000 016A             key = keypad_scan();
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 016B             if (key) {
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 016C                 lcd_cmd(0x01);
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 016D                 switch (key) {
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 016E                     case '1': // Balance
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 016F                         sprintf(buffer, "Acc:%d", current_user_index + 1); // Simplified account number
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0170                         lcd_string(buffer);
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0171                         lcd_cmd(0xC0);
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 0172                         sprintf(buffer, "Bal:%d", users[current_user_index].balance);
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0173                         lcd_string(buffer);
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 0174                         wait_for_hash(); // Wait for '#' to return to menu
;PCODE: $00000335 VOL: 0
; 0000 0175                         break;
;PCODE: $00000336 VOL: 0
; 0000 0176                     case '2': // Transfer
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 0177                         // Prompt for recipient username
; 0000 0178                         lcd_string("Send to:");
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 0179                         lcd_cmd(0xC0);
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 017A                         i = 0;
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 017B                         clear_input(recipient_username, 6);
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 017C                         while (i < 5) {
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 017D                             key = keypad_scan();
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 017E                             if (key && key != '#' && key != '*') {
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 017F                                 recipient_username[i] = key;
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 0180                                 lcd_data(key);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 0181                                 i++;
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 0182                             }
; 0000 0183                             if (key == '#') break;
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 0184                         }
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 0185                         recipient_username[i] = '\0';
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 0186 
; 0000 0187                         // Find recipient
; 0000 0188                         recipient_index = find_recipient(recipient_username);
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 0189                         if (recipient_index == -1) {
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 018A                             lcd_cmd(0x01);
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 018B                             lcd_string("Recipient Not");
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 018C                             lcd_cmd(0xC0);
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 018D                             lcd_string("Found");
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 018E                             wait_for_hash();
;PCODE: $0000037C VOL: 0
; 0000 018F                             break;
;PCODE: $0000037D VOL: 0
; 0000 0190                         }
; 0000 0191 
; 0000 0192                         // Prompt for amount
; 0000 0193                         lcd_cmd(0x01);
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 0194                         lcd_string("Enter Amount:");
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 0195                         lcd_cmd(0xC0);
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 0196                         i = 0;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0197                         clear_input(input_amount, 5);
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 0198                         while (i < 4) {
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 0199                             key = keypad_scan();
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 019A                             if (key && key != '#' && key != '*' && (key >= '0' && key <= '9')) {
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 019B                                 input_amount[i] = key;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 019C                                 lcd_data(key);
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 019D                                 i++;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 019E                             }
; 0000 019F                             if (key == '#') break;
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 01A0                         }
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 01A1                         input_amount[i] = '\0';
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 01A2 
; 0000 01A3                         // Convert amount to integer
; 0000 01A4                         amount = 0;
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0000 01A5                         for (i = 0; i < strlen(input_amount); i++) {
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 01A6                             amount = amount * 10 + (input_amount[i] - '0');
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 01A7                         }
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 01A8 
; 0000 01A9                         // Perform transfer
; 0000 01AA                         if (users[current_user_index].balance >= amount) {
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 01AB                             users[current_user_index].balance -= amount;
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 01AC                             users[recipient_index].balance += amount;
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 01AD                             add_transaction(current_user_index, recipient_index, amount);
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 01AE                             lcd_cmd(0x01);
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 01AF                             lcd_string("Transfer");
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 01B0                             lcd_cmd(0xC0);
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 01B1                             lcd_string("Complete");
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 01B2                         } else {
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 01B3                             lcd_cmd(0x01);
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0000 01B4                             lcd_string("Transfer");
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 01B5                             lcd_cmd(0xC0);
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 01B6                             lcd_string("Failed");
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 01B7                         }
;PCODE: $00000418 VOL: 0
; 0000 01B8                         wait_for_hash();
;PCODE: $00000419 VOL: 0
; 0000 01B9                         break;
;PCODE: $0000041A VOL: 0
; 0000 01BA                     case '3': // Transaction
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 01BB                         if (transaction_count == 0) {
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 01BC                             lcd_string("No Transactions");
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 01BD                             lcd_cmd(0xC0);
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 01BE                             lcd_string("Yet");
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 01BF                         } else {
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 01C0                             for (j = 0; j < transaction_count; j++) {
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0000 01C1                                 int idx = (transaction_index - 1 - j + 2) % 2; // Most recent first
; 0000 01C2                                 sprintf(buffer, "%d-%s-%d", j + 1, users[transactions[idx].recipient_index].username, tr ...
;PCODE: $00000436 VOL: 0
;	buffer -> Y+6
;	amount -> Y+4
;	j -> Y+2
;	idx -> Y+0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 01C3                                 if (j == 0) {
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 01C4                                     lcd_string(buffer);
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 01C5                                     lcd_cmd(0xC0);
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 01C6                                 } else {
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 01C7                                     lcd_string(buffer);
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01C8                                 }
;PCODE: $0000046D VOL: 0
; 0000 01C9                             }
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 01CA                         }
;PCODE: $00000475 VOL: 0
; 0000 01CB                         wait_for_hash();
;PCODE: $00000476 VOL: 0
; 0000 01CC                         break;
;PCODE: $00000477 VOL: 0
; 0000 01CD                     case '4': // Other
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 01CE                         lcd_string("Other Not");
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
; 0000 01CF                         lcd_cmd(0xC0);
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 01D0                         lcd_string("Implemented");
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 01D1                         wait_for_hash();
;PCODE: $00000483 VOL: 0
; 0000 01D2                         break;
;PCODE: $00000484 VOL: 0
; 0000 01D3                     case '*': // Exit
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 01D4                         authenticated = 0;
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 01D5                         LED_OK = 0;
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 01D6                         LED_ERROR = 0;
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0000 01D7                         current_user_index = -1;
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0000 01D8                         break;
;PCODE: $00000490 VOL: 0
; 0000 01D9                 }
;PCODE: $00000491 VOL: 0
; 0000 01DA             }
; 0000 01DB         }
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 01DC     }
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 01DD }
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0

	.DSEG
_0x62:
	.BYTE 0xBF
